package org.apache.maven.plugin.nar.cmake;

/*
 * Copyright 2001-2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.Collections;
import java.util.Map;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.plugin.nar.util.MojoUtils;
import org.apache.maven.project.MavenProject;

/**
 * Goal which compiles project files generated by CMake.
 * 
 * @goal nar-cmake-build
 * @phase compile
 * 
 * @author Gili Tzabari
 * @author Vladimir Bolshutkin
 */
public class CMakeBuildMojo extends AbstractCMakeMojo {
	/**
	 * The build configuration (e.g. "Win32|Debug", "x64|Release").
	 * 
	 * @parameter
	 */
	private String config;
	/**
	 * The target to build.
	 * 
	 * @parameter
	 */
	private String target;
	/**
	 * The environment variables.
	 * 
	 * @parameter
	 */
	private Map<String, String> environmentVariables;
	
	/**
	 * The output directory.
	 * 
	 * @parameter default-value="${basedir}/target"
	 */
	private File targetPath;
	
	/**
	 * @parameter expression="${project}"
	 * @required
	 * @readonly
	 */
	private MavenProject project;

	@Override
	public void narExecute() throws MojoExecutionException, MojoFailureException {
		
		if (!useCMake()) {
			return;
		}
		
		try {

			ProcessBuilder processBuilder = new ProcessBuilder("cmake", "--build",
					targetPath.getPath());
			if (target != null)
				Collections
						.addAll(processBuilder.command(), "--target", target);
			if (config != null)
				Collections
						.addAll(processBuilder.command(), "--config", config);

			Map<String, String> env = processBuilder.environment();

			if (environmentVariables != null)
				env.putAll(environmentVariables);
			Log log = getLog();
			if (log.isDebugEnabled()) {
				log.debug("targetPath: " + targetPath);
				log.debug("target: " + target);
				log.debug("config: " + config);
				log.debug("environment: " + processBuilder.environment());
				log.debug("command-line: " + processBuilder.command());
			}
			int returnCode = MojoUtils.waitFor(processBuilder);
			if (returnCode != 0)
				throw new MojoExecutionException("Return code: " + returnCode);
		} catch (InterruptedException e) {
			throw new MojoExecutionException("", e);
		} catch (IOException e) {
			throw new MojoExecutionException("", e);
		}
	}
}
